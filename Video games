# Programmer:  Patrick Junhee Kim 
# Date: 2022/7/3 
# Game name: Snake game 
# Solution: Using python(visual studio) and pygame to make a snake game


import sys
import pygame # pygame
from random import randint # random location of preys
from pygame.locals import QUIT, KEYDOWN, K_LEFT, K_RIGHT, K_UP, K_DOWN, Rect # keyboard to move a snake (directions)
 
 
pygame.init()  # initialize the pygame
 
# Basic setting of the pygame
GAMESIZE = 600  # setting the length and width of a game
GRID = 30  # specify the length of the grid
 
pygame.display.set_caption("Snake Game")  # Making game title
SURFACE = pygame.display.set_mode((GAMESIZE, GAMESIZE))
FPSCLOCK = pygame.time.Clock()
 
# Font setting
SMALLFONT = pygame.font.Font(None, 30)  # displaying the current score
DESCFONT = pygame.font.Font(None, 50)  # displaying the result score
TITLEFONT = pygame.font.Font(None, 80)  # displaying the game title
 
(W, H) = (GAMESIZE//GRID, GAMESIZE//GRID)  # number of grid
FOODS = []  # prey
 
 
class Snake:
    """ Snake object """
    def __init__(self, pos):
        self.bodies = [pos]  # specify the initial snake's head position
    def move(self, key):
        """Move Snake by each frame """
        xpos, ypos = self.bodies[0]  # Bring up the head position
        if key == K_LEFT:  # left (using x-coordinates)
            xpos -= 1
        elif key == K_RIGHT:  # right (using x-coordinates)
            xpos += 1
        elif key == K_UP:  # up (using y- coordinates)
            ypos -= 1
        elif key == K_DOWN:  # down (using y-coordinates)
            ypos += 1
        head = (xpos, ypos)  # update the head position using x coordinates and y coordinates
        # if snake's head hists its body
        # if snake's head goes outwards
        is_game_over = head in self.bodies or \
            not(0 <= xpos < W) or \
            not(0 <= ypos < H)
        self.bodies.insert(0, head)  # place the updated head on the body
 
        if head in FOODS:  # If the head is above the food coordinates (if the head is fed)
            # Moving the prey to the another location
            i = FOODS.index(head)
            del FOODS[i]  # The prey that has been eaten disappears
            add_food(self)  #  adding prey
        else:
            # If the snake hasn't eaten, erase its tail to prevent if from getting longer
            self.bodies.pop()
        return is_game_over  # returns whether or not the game is over.
 
    def draw(self):
        """Drawing a snake."""
        for body in self.bodies:
            x, y = body
            # place at the  x * GRID, y * GRID positions on the coordinates
            pygame.draw.rect(SURFACE, (0, 255, 255), (x * GRID, y * GRID, GRID, GRID))
 
def add_food(snake):
    """placing the prey"""
    while True:
        pos = (randint(0, W-1), randint(0, H-1))  # randomly positioning
        if pos in FOODS or pos in snake.bodies:  # if it's already in postion, or if there is a snake's body
            continue  #  run again
        FOODS.append(pos)  # Add prey to the corresponding coordinates
        break  # End of adding prey
 
 
def paint(snake, texts, message, score):
    """ drawing entire screen """
    SURFACE.fill((0, 0, 0))  # filling black of the screen
    for food in FOODS:  # drawing prey
        fx, fy = food
        # drawing a prey as a circle (green)
        pygame.draw.ellipse(SURFACE, (0, 255, 0),
                            (fx * GRID, fy * GRID, GRID, GRID))
 
    snake.draw()  # drawing snake
 
    for index in range(1, W):
        line_pos = index * GRID
        pygame.draw.line(SURFACE, (64, 64, 64),
                         (line_pos, 0), (line_pos, GAMESIZE))  # Draw a vertical line (fix the x-axis, move the y-axis)
        pygame.draw.line(SURFACE, (64, 64, 64),
                         (0, line_pos), (GAMESIZE, line_pos))  # Draw a horizontal line (move the x-axis, fix the y-axis)
 
    if message != None and score != None:  # If the game is over, the message and score will be designated.
        message_pos = message.get_rect()  # For positioning message
        score_pos = score.get_rect()  # For positioning score
 
        # Place the message in the middle
        message_pos.centerx = GAMESIZE//2
        message_pos.centery = GAMESIZE//2
 
        # Position the score below the message
        score_pos.centerx = GAMESIZE//2
        score_pos.top = message_pos.bottom  # From the top of the socre to the bottom of the message
 
        SURFACE.blit(message, message_pos)  # Game over message
        SURFACE.blit(score, score_pos)  # Result score
    SURFACE.blit(texts, (50, 50))  # Current game score (displays at the top left)
    pygame.display.update()  # Game update
    FPSCLOCK.tick(5)  # Set screen update rate to 5-times per second
 
def main():
    """ main routine"""
 
    # initialize the default variables
    key = K_DOWN  # Key to be specified when no key is entered
    message = None
    score = None
    game_over = False
    snake = Snake((int(W/2), int(H/2)))  # Snake in the middle
 
    for i in range(5):  # Pre-load of 5 preys
        add_food(snake)
 
    while True:
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == KEYDOWN:
                key = event.key  # receives key which is entered
 
        if game_over:  # If game is over
            message = TITLEFONT.render("Game Over!", True, (255, 255, 0))
            score = DESCFONT.render(f"Score: {len(snake.bodies)-1}", True, (255, 0, 0))  # The score excluding the head
        else:
            game_over = snake.move(key)  # Bring whether or not game over while moving
        texts = SMALLFONT.render(f"Score: {len(snake.bodies)-1}", True, (255, 0, 255))
        paint(snake, texts, message, score)  # update the screen
 
 
if __name__ == '__main__':
    main()
 
 
 
 

